//
//  MLService.swift
//  Scanimals
//
//  Created by Adam Lee on 5/26/25.
//
import UIKit
import Vision
import CoreML

/// Handles image classification and fact generation via GeminiService
final class MLService {
    static let shared = MLService()

    private let classificationModel: VNCoreMLModel
    private let geminiService: GeminiService

    private init() {
        // Load Core ML model
        let configuration = MLModelConfiguration() // Create a default model configuration

        // 1. Instantiate the model using the new init(configuration:)
        //    Ensure 'Resnet50' is the exact, case-sensitive name of the class
        //    generated by Xcode for your .mlmodel file.
        guard let resnetModelInstance = try? Resnet50(configuration: configuration) else {
            fatalError("Unable to create Resnet50 model instance with configuration. Check model class name and target membership.")
        }
        
        // 2. Get the underlying MLModel from the instance
        let coreMLModel = resnetModelInstance.model

        // 3. Create the VNCoreMLModel using the MLModel
        guard let vnModel = try? VNCoreMLModel(for: coreMLModel) else {
            fatalError("Unable to create VNCoreMLModel from Resnet50's model")
        }
        self.classificationModel = vnModel

        // Initialize Gemini with API key from config - REMAINS THE SAME
        // Make sure APIConfig.geminiKey is the correct property name you defined
        let apiKey = APIConfig.geminiKey
        self.geminiService = GeminiService(apiKey: apiKey)
    }

    /// Classify the image and return the top identifier
    func classify(_ image: UIImage) async throws -> String {
        guard let ciImage = CIImage(image: image) else {
            throw MLServiceError.invalidImage
        }
        let request = VNCoreMLRequest(model: classificationModel)
        let handler = VNImageRequestHandler(ciImage: ciImage)
        try handler.perform([request])
        guard let obs = request.results?.first as? VNClassificationObservation else {
            throw MLServiceError.classificationFailed
        }
        return obs.identifier
    }

    /// Generate an animal fact using Gemini
    func generateFact(for animal: String) async throws -> String {
        try await geminiService.generateAnimalFact(for: animal)
    }
}

enum MLServiceError: Error {
    case invalidImage, classificationFailed
}
